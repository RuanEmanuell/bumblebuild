generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model PasswordRecoveryToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    Int
  createdAt DateTime @default(now())
  expiredAt DateTime
  user      User     @relation(fields: [userId], references: [id])
}

model CPU {
  id                 Int     @id
  socket             String
  cores              Int
  threads            Int
  frequency          Float
  tdp                Int
  integratedGraphics Boolean
  part               Part    @relation("CPUToPart", fields: [id], references: [id])
}

model GPU {
  id         Int    @id
  memoryGB   Int
  memoryType String
  tdp        Int
  lengthMM   Float
  part       Part   @relation("GPUToPart", fields: [id], references: [id])
}

model RAM {
  id         Int    @id
  capacityGB Int
  type       String
  frequency  Int
  part       Part   @relation("RAMToPart", fields: [id], references: [id])
}

model SSD {
  id         Int    @id
  capacityGB Int
  type       String
  readMBs    Int
  writeMBs   Int
  part       Part   @relation("SSDToPart", fields: [id], references: [id])
}

model PSU {
  id            Int     @id
  powerW        Int
  certification String
  modular       Boolean
  part          Part    @relation("PSUToPart", fields: [id], references: [id])
}

model Case {
  id             Int    @id
  supportedSizes String
  maxGpuLengthMM Int
  part           Part   @relation("CaseToPart", fields: [id], references: [id])
}

model Cooler {
  id            Int    @id
  type          String
  socketSupport String
  part          Part   @relation("CoolerToPart", fields: [id], references: [id])
}

model Motherboard {
  id                   Int    @id
  socket               String 
  ramType              String 
  slots                Int 
  maxRAM               Int 
  size                 String 
  part                 Part   @relation("MotherboardToPart", fields: [id], references: [id])
}

enum PartType {
  CPU
  GPU
  RAM
  SSD
  PSU
  CASE
  MOTHERBOARD
  COOLER
}

model User {
  id                     Int       @id @default(autoincrement())
  userType               String
  name                   String
  email                  String    @unique
  password               String
  status                 Boolean   @default(true)
  profilePictureUrl      String?
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  passwordRecoveryTokens PasswordRecoveryToken[]

  builds Build[] @relation("UserBuilds")
}

model Build {
  id         Int       @id @default(autoincrement())
  userId     Int
  user       User      @relation("UserBuilds", fields: [userId], references: [id])
  name       String
  createdAt  DateTime  @default(now())

  buildParts BuildPart[]
}

model Part {
  id          Int          @id @default(autoincrement())
  name        String?
  brand       String
  price       Float
  type        PartType
  imageUrl    String?
  priceLink   String?
  createdAt   DateTime     @default(now())
  cpu         CPU?         @relation("CPUToPart")
  case        Case?        @relation("CaseToPart")
  cooler      Cooler?      @relation("CoolerToPart")
  gpu         GPU?         @relation("GPUToPart")
  motherboard Motherboard? @relation("MotherboardToPart")
  psu         PSU?         @relation("PSUToPart")
  ram         RAM?         @relation("RAMToPart")
  ssd         SSD?         @relation("SSDToPart")

  buildParts BuildPart[] @relation("PartBuildParts")
}

model BuildPart {
  id        Int    @id @default(autoincrement())
  buildId   Int
  partId    Int
  build     Build  @relation(fields: [buildId], references: [id])
  part      Part   @relation("PartBuildParts", fields: [partId], references: [id])
}
